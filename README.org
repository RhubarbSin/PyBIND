#+TITLE: PyBIND: The Py That BINDs
This directory contains a python package for creating and writing BIND 9 configuration files and zone files.

=dnszone= is not intended or suitable for general manipulation of zones and zone files; use [[http://www.dnspython.org/][dnspython]] for that. Similary, =bindconf= doesn't read or parse BIND configuration files; try [[https://code.google.com/p/iscpy/][ISCpy]] for that. These were created specifically for /writing/ files rather than parsing or otherwise manipulating them.

Terminology and other reference information have been taken from ZYTRAX, Inc.'s [[http://www.zytrax.com/books/dns][DNS for Rocket Scientists]].

Patches and suggestions are welcome, but I created these of course to address my own needs.

* Example usage
** Configuration file
   #+BEGIN_SRC python
   import pybind
   
   zone = pybind.Zone('example.com', 'master', 'example.com.hosts')
   view = pybind.View('example_view')
   view.add_zone(zone)
   config = pybind.BINDConf()
   config.add_view(view)
   config.write_file('named.conf')
   #+END_SRC
** Forward zone file
   #+BEGIN_SRC python
   import pybind
   
   zone = pybind.ForwardZone('example.com')
   zone.add_soa('ns1', 'hostmaster')
   zone.add_ns('ns1')
   zone.add_ns('ns2')
   zone.add_mx('mail1')
   zone.add_mx('mail2', 20, ttl=600)
   zone.add_a('192.168.1.1', 'ns1')
   zone.add_aaaa('2001:db8::1', 'ns1')
   zone.add_txt('v=spf1 mx ~all')
   zone.add_cname('mailserver', 'mail')
   zone.write_file('example.com.hosts')
   #+END_SRC
** IPv4 reverse zone file
   #+BEGIN_SRC python
   import pybind
   
   zone_name = '1.168.192.in-addr.arpa'
   zone = pybind.ReverseZone(zone_name)
   zone.add_soa('ns1.example.com.', 'hostmaster@example.com.')
   zone.add_ns('ns1.example.com.')
   zone.add_ptr('192.168.1.1', 'ns1.example.com.')
   zone.write_file('%s.hosts' % zone_name)
   #+END_SRC
** IPv6 reverse zone file
   #+BEGIN_SRC python
   import pybind

   zone_name = '0.0.0.0.0.0.0.0.0.8.b.d.1.0.0.2.ip6.arpa'  # /64
   zone = pybind.ReverseZone(zone_name)
   zone.add_soa('ns1.example.com.', 'hostmaster@example.com.')
   zone.add_ns('ns1.example.com.')
   zone.add_ptr('2001:db8::1', 'ns1.example.com.')
   zone.write_file('%s.hosts' % zone_name)
   #+END_SRC

* Remaining work
  - make available via PyPI (already registered)
  - add SPF support, other RR types
  - add more config statements
  - add DNSSEC support

* Why?
Building zones from scratch with [[http://www.dnspython.org/][dnspython]] is tedious and complicated; it wasn't intended for such use. I initially was successful in doing so, but there seemed to be some bugs in writing the zones to files.

* License

Copyright (c) 2012 Brian L. Brush

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
